// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Log {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  namespace String
  body      Json
}

model TextMessageRoute {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  source      String
  type        String
  destination String
}

model TelegramContacts {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  botHandle String?
  botId     String?
  bot       TelegramBots? @relation(fields: [botId], references: [id])
  chatId    String
  userId    String
  userName  String?
}

model TelegramBots {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  botHandle     String?
  webhookSecret String
  botToken      String

  messages    TelegramMessages[]
  contacts    TelegramContacts[]
  attachments Attachment[]
}

model RssExport {
  id                  String    @id @default(uuid())
  createdAt           DateTime  @default(now())
  rssUrl              String
  telegramChannelName String
  lastSignature       String?
  lastUpdateAt        DateTime?
  RssItem             RssItem[]
}

model RssItem {
  id               String    @id @default(uuid())
  createdAt        DateTime  @default(now())
  channelMessageId String
  guid             String
  signature        String?
  rssExportId      String
  rssExport        RssExport @relation(fields: [rssExportId], references: [id])
}

model TaskQueue {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  error       String?
  key         String?
  task        Json
}

model EmailForwarding {
  id               String    @id @default(uuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  telegramUserId   String
  forwardTo        String
  confirmed        DateTime?
  secret           String
  confirmationCode String?
}

model BlockedEmails {
  id        String    @id @default(uuid())
  email     String
  blockedAt DateTime? @default(now())
}

model EmailForwardingStat {
  id             String   @id @default(uuid())
  email          String
  dayStart       DateTime
  forwardedCount Int
}

model Attachment {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  filename  String?

  botId     String?
  bot       TelegramBots? @relation(fields: [botId], references: [id])
  botHandle String

  fileId String
  secret String
}

model AiChatSessions {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  closedAt       DateTime?
  telegramUserId String
  chatMessage    AiChatMessage[]
}

model AiChatMessage {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  sessionId         String
  session           AiChatSessions    @relation(fields: [sessionId], references: [id])
  message           Json
  telegramMessageId String?
  telegramMessage   TelegramMessages? @relation(fields: [telegramMessageId], references: [id])
}

model AiCostsTransactions {
  id             String   @id @default(uuid())
  timestamp      DateTime @default(now())
  telegramUserId String
  sessionId      String?
  tokens         Int?
  model          String?
  type           String
  credits        Decimal
}

model TelegramMessages {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  botId          String
  bot            TelegramBots    @relation(fields: [botId], references: [id])
  botHandle      String
  messageId      String
  telegramUserId String
  payload        Json
  mediaGroupId   String?
  chatMessage    AiChatMessage[]
}

model AiChatSettings {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  telegramUserId String
  settings       Json?
}

model AiChatState {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleteAt       DateTime?
  telegramUserId String
  state          Json?
}
